from twitchio.ext import commands

from config import db


class Help(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    @commands.command(
        name='help',
        aliases=['commands'],
        cooldown={'per': 5, 'gen': 0},
        description='–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞.'
    )
    async def help(self, ctx):
        content = ctx.content.lstrip(self.bot._prefix).lower()
        if not content:
            smile = self.bot.smile(ctx, [['PepoG', 'NOTED'], ['üìö']])
            message = f'{smile} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - https://pastebin.com/wTD5z2AQ | ' \
                      f'–ù–∞–ø–∏—à–∏—Ç–µ {self.bot._prefix}help [–∫–æ–º–∞–Ω–¥–∞], —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã'
            await ctx.reply(message)
            return

        command = self.bot.get_command_name(content.split()[0])
        if not command:
            await ctx.reply('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞')
            return

        data = self.bot.get_command(command)
        if 'admin' in data.flags:
            await ctx.reply('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞')
            return

        aliases = ''
        if data.aliases:
            aliases = f'({self.bot._prefix}{str(", " + self.bot._prefix).join(data.aliases)})'

        cooldowns = await db.cooldowns.find_one({'channel': ctx.channel.name})
        if cooldowns and 'whitelist' not in data.flags:

            if command in cooldowns['commands']:
                if 'offline' in cooldowns['commands'][command]:
                    offline = {
                        'per': cooldowns['commands'][command]['offline']['per'],
                        'gen': cooldowns['commands'][command]['offline']['gen']
                    }
                else:
                    mul_offline = cooldowns['mul_offline']
                    offline = {
                        'per': max(cooldowns['min_offline']['per'], data.cooldown['per'] * mul_offline),
                        'gen': max(cooldowns['min_offline']['gen'], data.cooldown['gen'] * mul_offline)
                    }
                if 'online' in cooldowns['commands'][command]:
                    online = {
                        'per': cooldowns['commands'][command]['online']['per'],
                        'gen': cooldowns['commands'][command]['online']['gen']
                    }
                else:
                    mul_online = cooldowns['mul_online']
                    online = {
                        'per': max(cooldowns['min_online']['per'], data.cooldown['per'] * mul_online),
                        'gen': max(cooldowns['min_online']['gen'], data.cooldown['gen'] * mul_online)
                    }
            else:
                mul_offline = cooldowns['mul_offline']
                mul_online = cooldowns['mul_online']
                offline = {
                    'per': max(cooldowns['min_offline']['per'], data.cooldown['per'] * mul_offline),
                    'gen': max(cooldowns['min_offline']['gen'], data.cooldown['gen'] * mul_offline)
                }
                online = {
                    'per': max(cooldowns['min_online']['per'], data.cooldown['per'] * mul_online),
                    'gen': max(cooldowns['min_online']['gen'], data.cooldown['gen'] * mul_online)
                }
        else:
            offline = data.cooldown
            online = data.cooldown

        offline_per = offline['per']
        offline_gen = offline['gen']
        online_per = online['per']
        online_gen = online['gen']

        if offline_per and offline_gen and offline == online:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å, –æ–±—â–∏–π {offline_gen}—Å.'
        elif offline_per and offline == online:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å.'
        elif offline_gen and offline == online:
            cooldown = f'–æ–±—â–∏–π {offline_gen}—Å.'
        elif offline_per and offline_gen and online_per and online_gen:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å, –æ–±—â–∏–π {offline_gen}—Å (–Ω–∞ —Å—Ç—Ä–∏–º–µ: {online_per}—Å, {online_gen}—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ).'
        elif offline_per and offline_gen and online_per:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å, –æ–±—â–∏–π {offline_gen}—Å (–Ω–∞ —Å—Ç—Ä–∏–º–µ: –ª–∏—á–Ω—ã–π {online_per}—Å).'
        elif offline_per and offline_gen and online_gen:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å, –æ–±—â–∏–π {offline_gen}—Å (–Ω–∞ —Å—Ç—Ä–∏–º–µ: –æ–±—â–∏–π {online_gen}—Å).'
        elif offline_per and online_per and online_gen:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å (–Ω–∞ —Å—Ç—Ä–∏–º–µ: –ª–∏—á–Ω—ã–π {online_per}—Å, –æ–±—â–∏–π {online_gen}—Å).'
        elif offline_gen and online_per and online_gen:
            cooldown = f'–æ–±—â–∏–π {offline_gen}—Å (–Ω–∞ —Å—Ç—Ä–∏–º–µ: –ª–∏—á–Ω—ã–π {online_per}—Å, –æ–±—â–∏–π {online_gen}—Å).'
        elif offline_per and online_per and offline_per != online_per:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å (–Ω–∞ —Å—Ç—Ä–∏–º–µ: –ª–∏—á–Ω—ã–π {online_per}—Å).'
        elif offline_gen and online_gen and offline_gen != online_gen:
            cooldown = f'–æ–±—â–∏–π {offline_gen}—Å (–Ω–∞ —Å—Ç—Ä–∏–º–µ: –æ–±—â–∏–π {online_gen}—Å).'
        elif offline_per:
            cooldown = f'–ª–∏—á–Ω—ã–π {offline_per}—Å'
        else:
            cooldown = f'–æ–±—â–∏–π {offline_gen}—Å'

        for_who = ''
        if 'moderator' in data.flags and 'trusted' in data.flags:
            for_who = '–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        elif 'moderator' in data.flags:
            for_who = '–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.'

        message = f'{self.bot._prefix}{command}{":" if not aliases else " " + aliases + ":"} ' \
                  f'{data.description.format(prefix=self.bot._prefix)} {for_who} ' \
                  f'–ö–¥: {cooldown}'

        await ctx.reply(message)


def prepare(bot):
    bot.add_cog(Help(bot))
